//<pre>/* munch.java    --- rrs@isi.edu ---   08-06-99   *//* Munching Squares is a neat display hack!!! this applet should provide about 12 hours  of different displays before repeating.   This version is for bitmap displays and Xor’s the pixels for a multi-pas display.   Originally this was five machine language instructions on the Dec PDP-1	*/import java.awt.*;import java.applet.*;import java.awt.event.*;public class munch1024nx extends Applet  implements Runnable{	int wx, wy;			// window width and heigth	int x, y, t;	int lim = 1023;	Thread munchThread;	int delay = 10;	static boolean keepRunning;	Graphics myG;	Color penColor;		public static void main( String str[ ] ) {		munch1024nx myMunch = new munch1024nx( );		Frame myf = new Frame( "Munch Frame" );		myf.setSize( 1024, 1024 );		myf.add( myMunch );		myf.setVisible( true );		//		myf.addWindowListener( 				new WindowAdapter( ) {						public void windowClosing( WindowEvent e ) {							System.exit( 0 );						}				} 			);		myMunch.init( );		myMunch.start( );		}			 public void init( )		{			wx = 1024;			wy = 1024;			myG = this.getGraphics( );			Dimension d = getSize();			if (( d.width != wx ) || ( d.height != wy))  { resize( wx, wy); }			setBackground( Color.white);			keepRunning = true;			String spdstr =  "10";			delay = Integer.parseInt( spdstr );		}	public void start( ) 		{			keepRunning = true;			munchThread = new Thread(this);			myG.setColor( Color.white );			myG.fillRect( 0, 0,   wx-1, wy-1);			Thread.currentThread().yield( );			munchThread.start();		}	public void stop() 		{			keepRunning = false;			munchThread.stop();		}	public void run (  )		{			int sw = 1, sdel = 300;			int x, y;			boolean fullcycle = true;			t=0;			penColor = Color.blue;			Thread.currentThread().yield( );			while( keepRunning )			   {				update( myG );				t = ( t + sw ) & 1023;				if( t == 0 ) {					fullcycle = ! fullcycle;					penColor = Color.white;					if ( fullcycle ) {						sw = (sw + 1) & 1023;						penColor = Color.blue;					}				}				Thread.currentThread().yield(); 			  }		}		public void update( Graphics g )		{			paint( g );		}	public void paint ( Graphics g )		{			int lim = 1023;			g.setColor( penColor );			for( int x = 0; x <= lim; x++)	 		   {											g.drawLine( x, x^t,  x, x^t );			   }		}	//{{DECLARE_CONTROLS	//}}}//</pre>